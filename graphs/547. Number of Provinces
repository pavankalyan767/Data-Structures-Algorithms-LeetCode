class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        


        # Approach 
        # first convert the adjacency matrix into a adjacency list 
        # later created a visited array of the size of the number of nodes 
        # now since dfs on a node visits and traverses all the nodes connected 
        # to that particular node i can increase the count by 1
        # later i can just run a for loop in that way to count how many times 
        # i have to run dfs inorder to be able to traverse all the nodes 
        # so the number of dfs s needed is the total number of components 
        # present or the provinces present


        adj = []

        for i in range(0,len(isConnected)):
            adj.append([])

        for i in range(0,len(isConnected)):
            for j in range(0,len(isConnected[0])):
                if i!=j:
                    if isConnected[i][j]==1:
                        adj[i].append(j)
        
        visited = [0]*len(isConnected)

        def dfs(node):
            visited[node]=1
            for i in adj[node]:
                if visited[i]!=1:
                    dfs(i)
        count=0
        for i in range(len(isConnected)):
            if visited[i]==0:
                dfs(i)
                count+=1
        return count
        
