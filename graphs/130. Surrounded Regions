from collections import deque
class Solution:
    def solve(self, board: List[List[str]]) -> None:

        # Approach 
        # since i have to find if a region of connected O's are connected 
        # to the outside ie the border 
        # first i start a dfs from the border cells containing O
        # and mark them as # 
        # the other O's which can't be reached will remain O
        # so dfs works only when r and c are in bounds and the cell which i 
        # am traversing is O and not X
        # later loop through and mark Os as X
        # and mark #'s as O's

        
        rows = len(board)
        cols = len(board[0])
        

        directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]
        

        def dfs(r,c):
            
            if r<0 or c<0 or r==rows or c==cols or board[r][c]!='O':
                return 

            board[r][c]='#'

            for dx,dy in directions:
                dfs(r+dx,c+dy)

        for r in range(rows):
            for c in range(cols):
                if r in [0,rows-1] or c in [0,cols-1]:
                    dfs(r,c)

        for r in range(rows):
            for c in range(cols):
                if board[r][c]=='O':
                    board[r][c]='X'
        for r in range(rows):
            for c in range(cols):
                if board[r][c]=='#':
                    board[r][c]='O'


        

        

        


        

        
                    
        



            
                
        
        
    
