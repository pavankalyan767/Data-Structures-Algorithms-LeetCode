from typing import List
from collections import deque
class Solution:
    #Function to detect cycle in an undirected graph.
	def isCycle(self, V: int, adj: List[List[int]]) -> bool:
	    
	    
	    
	    # Approach 
	    # use dfs 
	    # so dfs carries two args source and parent
	    # mark it as visited 
	    # now check for all the adjacent nodes 
	    # if it is not visited then perform dfs 
	    # else if it is not visited then check if the parent is not 
	    
	    # the neighbour if the parent is not the neighbour 
	    # then return True
	    # perform dfs on all the unvisited nodes by declaring 
	    # a visited array in the starting.
	    
	    
	    visited=[0]*V
	    
	    
	    
	    
	    def dfs_detect_cycle(src,parent):
	        
	        visited[src]=1
	       
	        
	        for neighbour in adj[src]:
	            if visited[neighbour]==0:
	                
	                if dfs_detect_cycle(neighbour,src):
	                    return True
	            else:
	                if parent!=neighbour:
	                    return True
	                    
	    for i in range(V):
	        if visited[i]==0:
	            
	            if dfs_detect_cycle(i,-1):
	                return True
	    return False
	                    
	        
	   
		            
		    
		    


#{ 
 # Driver Code Starts

if __name__ == '__main__':

	T=int(input())
	for i in range(T):
		V, E = map(int, input().split())
		adj = [[] for i in range(V)]
		for _ in range(E):
			u, v = map(int, input().split())
			adj[u].append(v)
			adj[v].append(u)
		obj = Solution()
		ans = obj.isCycle(V, adj)
		if(ans):
			print("1")
		else:
			print("0")

# } Driver Code Ends
