#{ 
 # Driver Code Starts
# Initial Template for Python 3
import atexit
import io
import sys
import heapq
from typing import List, Tuple


# } Driver Code Ends

from collections import defaultdict,deque
class Solution:
    # Function to find the shortest distance of all the vertices
    # from the source vertex src.
    def dijkstra(self, adj: List[List[Tuple[int, int]]], src: int) -> List[int]:
        
        """
        Input: adj = [[[1, 9]], [[0, 9]]], src = 0
        Output: [0, 9]
        
        Input: adj = [[[1, 1], [2, 6]], [[2, 3], [0, 1]], [[1, 3], [0, 6]]], src = 2
        Output: [4, 3, 0]
        """
        
        
        
        
            
        # Approach 
        # initialize the distance array 
        # use a mine_heap to implement a priority queue 
        # at each node , when i update the distance , i add it to the 
        # priority queue 
        # and the priority queue helsp me pop elements based on the 
        # distances which is assigned as priority to them 
        V = len(adj)
        distance = [1e9 for _ in range(V)]
        
        distance[src] = 0
        
        min_heap = [(0,src)]
        
        
        
        
        # pop current_distance and node from priority queue
        
        while min_heap:
            cur_dist,node = heapq.heappop(min_heap)
            
            if cur_dist>distance[node]:
                continue
        
        
        #the adj has the neighbour and the distance to reach that 
        # neighbour 
        # then when ever the distance is updated 
        # add that to the heap 
        
        
            for neighbour,weight in adj[node]:
                new_dist = cur_dist+weight
                if new_dist<distance[neighbour]:
                    distance[neighbour] = new_dist
                    heapq.heappush(min_heap,(new_dist,neighbour))
        return distance
                
        
        
        
        

#{ 
 # Driver Code Starts.

if __name__ == '__main__':
    test_cases = int(input())
    for cases in range(test_cases):
        V, E = map(int, input().strip().split())
        adj = [[] for _ in range(V)]
        for _ in range(E):
            u, v, w = map(int, input().strip().split())
            adj[u].append((v, w))
            adj[v].append((u, w))
        src = int(input())
        ob = Solution()

        res = ob.dijkstra(adj, src)
        for i in res:
            print(i, end=" ")
        print()
        print("~")
# } Driver Code Ends
