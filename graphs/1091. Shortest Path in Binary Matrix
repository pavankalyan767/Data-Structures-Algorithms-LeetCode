from collections import deque
class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:

        """ 
        1091. Shortest Path in Binary Matrix
Solved
1658
Medium
Topics
Companies
Hint
Facebook
Amazon
Microsoft
Google
Snapchat
Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

 

Example 1:


Input: grid = [[0,1],[1,0]]
Output: 2
Example 2:


Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4
Example 3:

Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 100
grid[i][j] is 0 or 1
        """


""" 
Approach/thought process : 
1. the different directions that i can move are 8 directions
2. can only move from 0th cell to 0th cell , can't move through 1th cell
3. so start a bfs from the initial node 
4. keep on exploring all cells that are 0 and not 1 , and store row,col,distance in the queue
5. check if i can go the the next row based on conditions such as 
6. if it is inbound , if it is 0 cell , if it is not already present int he tracker 
7. use a tracker to make sure that i don't visits the same cells again and again 
8. and for every time i reach the bottom right cell , record the minimum_distance 
9. later return the minimum_distance
"""






        directions = [
    (-1, 0),  # Up
    (1, 0),   # Down
    (0, -1),  # Left
    (0, 1),   # Right
    (-1, -1), # Top-left diagonal
    (-1, 1),  # Top-right diagonal
    (1, -1),  # Bottom-left diagonal
    (1, 1)    # Bottom-right diagonal
]

        rows = len(grid)
        cols = len(grid[0])

        q = deque()
        if grid[0][0]==1:
            return -1
        if len(grid)==1 and len(grid[0])==1:
            if grid[0][0]==0:
                return 1
            return -1
        q.append([0,0,0])

        tracker = {}
        maximum_distance = float('inf')
        while q:
            row,col,dist = q.popleft()

            for dr,dc in directions:
                new_row,new_col = row+dr,col+dc

                if new_row>=0 and new_row<rows and new_col>=0 and new_col<cols and grid[new_row][new_col]==0 and (new_row,new_col) not in tracker:
                    tracker[(new_row,new_col)] = 0
                    q.append([new_row,new_col,dist+1])
                    if new_row==rows-1 and new_col==cols-1:
                        maximum_distance = min(maximum_distance,dist+1)
        if (rows-1,cols-1) not in tracker:
            return -1
        
        return maximum_distance+1

        



        
        
