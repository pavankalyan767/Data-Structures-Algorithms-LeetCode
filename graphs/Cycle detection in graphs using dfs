#User function Template for python3
from typing import List

class Solution:
    
    #Function to detect cycle in a directed graph.
    def isCyclic(self, V : int , adj : List[List[int]]) -> bool :
        
        # Approach look into the example in the notes 
        # so if i start at a node and pursue a path 
        # and then arrive at the same node then it is a cycle 
        # this is a bit different from undirected graphs 
        # where anything that isn't adjacent and it already 
        # traversed is a cycle 
        # but here it is not the case 
        # here what i do is 
        # i use two arrays 
        # visited and path_visited 
        # visited array keeps tracks all the nodes that i have visited 
        # and doesn't change when i come back from that path or node 
        # or backtrack or something 
        # but the path_visited array will be marked as zero if i backtract 
        # from that particular node 
        # so just imagine there is no need to backtract since i don't 
        # have to go back from any node hwn it doesn't have cycle 
        # so i'll continue on the same path and will never mark the 
        # path_visited as 0 when i am in a path that can be a potential 
        # cycle 
        
        
        visited = [0]*V
        path_visited=[0]*V
        
        def dfs(src):
            visited[src]=1
            path_visited[src]=1
            
            for neighbour in adj[src]:
                if visited[neighbour]==False:
                    if dfs(neighbour):
                        return True
                    
                else:
                    if path_visited[neighbour]==1:
                        return True
                    
                    
            path_visited[src]=0
            return False
                    
    
        for i in range(V):
            if visited[i]==0:
                if dfs(i):
                    return True
        return False


#{ 
 # Driver Code Starts
#Initial Template for Python 3

import sys

sys.setrecursionlimit(10**6)

if __name__ == '__main__':
    t = int(input())
    for i in range(t):
        V, E = list(map(int, input().strip().split()))
        adj = [[] for i in range(V)]
        for i in range(E):
            a, b = map(int, input().strip().split())
            adj[a].append(b)
        ob = Solution()

        if ob.isCyclic(V, adj):
            print(1)
        else:
            print(0)

# } Driver Code Ends
