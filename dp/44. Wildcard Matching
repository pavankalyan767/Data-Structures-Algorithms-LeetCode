class Solution:
    def isMatch(self, s: str, p: str) -> bool:

        dp = {}
        # The approach is 
        # better look into the book it is a lengthy thing 

        # def solve(i,j):



        #     if (i,j) in dp:
        #         return dp[(i,j)]
        #     if i==0 and j==0:
        #         return True
        #     if i>0 and j==0:
        #         return False
        #     if j>0 and i==0:
        #         for j in range(1,j+1):
        #             if p[j-1]!='*':
        #                 return False
        #         return True
            

        #     if s[i-1]==p[j-1] or p[j-1]=='?':
        #         dp[(i,j)] = solve(i-1,j-1)
        #         return solve(i-1,j-1)
        #     elif p[j-1]=='*':
        #         dp[(i,j)] = solve(i,j-1) or solve(i-1,j)
        #         return solve(i,j-1) or solve(i-1,j)
        #     else:
        #         dp[(i,j)] = False
        #         return False

        # return solve(len(s),len(p))  



        dp[(0,0)] = True

        for i in range(1,len(s)+1):
            dp[(i,0)] = False
        
        for j in range(1,len(p)+1):
            flag = True
            for j in range(1,j+1):
                if p[j-1]!='*':
                    flag = False
                    break
            dp[(0,j)] = flag
        
        for i in range(1,len(s)+1):
            for j in range(1,len(p)+1):

                if s[i-1]==p[j-1] or p[j-1]=='?':
                    dp[(i,j)] = dp.get((i-1,j-1))
                
                elif p[j-1]=='*':
                    dp[(i,j)] = dp.get((i-1,j)) or dp.get((i,j-1))
                
                else:
                    dp[(i,j)] = False
        return dp.get((len(s),len(p)))
        



        
