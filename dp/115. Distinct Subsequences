class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        dp = {}

        # Approach 
        # at each index if i match i and j 
        # there are two options 
        # i can either match them or i can search for other matches for 
        # j in in the first string 
        # so i sum up both of those possibilities 
        # if i dont match then i reduce the first string 
        # since i need to find common between second and first string 
        # only then i can move backward in index for matching other 
        # chars in the second string 
        # over here if i run out of index in the second string 
        # it means i have reached my goal 
        # so return 1
        # the same thing with the first string 
        # return 0
        # cuz i couldn't find a match 
        # use one based indexing here or also 0
        # for tabulation it is better to start with one based 
        # indexing since i can't strt with 0 since there are negative values of 
        # i and j and both of them are different cases 



        # def solve(i,j):
        #     if j==0:
        #         return 1
        #     if i==0:
        #         return 0
        #     if (i,j) in dp:
        #         return dp[(i,j)]
        #     if s[i-1]==t[j-1]:
        #         dp[(i,j)] = solve(i-1,j-1)+solve(i-1,j)
        #         return dp[(i,j)]
        #     else:
        #         dp[(i,j)] = solve(i-1,j)
        #         return dp[(i,j)]

        # return solve(len(s),len(t))

        for j in range(len(t)+1):
            dp[(0,j)] = 0

        for i in range(len(s)+1):
            dp[(i,0)] = 1
        

        for i in range(1,len(s)+1):
            for j in range(1,len(t)+1):
                if s[i-1]==t[j-1]:
                    dp[(i,j)] = dp[(i-1,j-1)] + dp[(i-1,j)]
                else:
                    dp[(i,j)] = dp[(i-1,j)]

        return dp[(len(s),len(t))]
            
        
