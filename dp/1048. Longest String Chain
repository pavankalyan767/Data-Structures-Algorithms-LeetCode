class Solution:
    def longestStrChain(self, words: List[str]) -> int:

        # approach 
        # first sort the words in the words array based on their sizes 
        # then compare them if they can be connected to make a chain 
        # so the chain builds up and so on 
        # so to calculate the longest consecutive chain i can go with the 
        # longest increasing subsequence 
        # when the logic would be to check if there can be a chain be 
        # formed between a given word and it's predecessor 


        words.sort(key = lambda x:len(x))
        def checker(s1,s2):
            if len(s1)!=len(s2)+1:
                return False

            first = 0
            second = 0
            while first<len(s1):
                if second < len(s2) and s1[first] == s2[second]:
                    second += 1
        # Always move the first pointer.
                first += 1
            if first==len(s1) and second==len(s2):
                return True
            else:
                return False
        dp = [1]*len(words)

        for cur in range(0,len(words)):
            for prev in range(0,cur):
                if checker(words[cur],words[prev]):
                    dp[cur] = max(dp[cur],1+dp[prev])

        return max(dp)
                
                
