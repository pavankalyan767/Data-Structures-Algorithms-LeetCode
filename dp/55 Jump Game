class Solution:
    def canJump(self, nums: List[int]) -> bool:
        
        # Approach 

        # basically at each index i can take maximum of nums[index] steps
        # so i run a loop 
        # since if i take more steps it is beneficial i start the loop from nums[index] to 1
        # the base case being reaching the last index of the array return True
        # if i reach an index where nums[index] is 0 then i cant move from that index  so return False
        # and in the loop i just have to find if it is possible or not so if i encounter True in any path 
        # just return True 
        # or else at the end return False
        # update the dp dictionary simultaneously 

        
        dp = {}

        def solve(index):
            if index in dp:
                return dp[index]


            if index>=len(nums)-1:
                dp[index]=True
                return True
            
            if nums[index]==0:
                dp[index]=False
                return False
            


            for i in range(nums[index],0,-1):
                if solve(index + i):
                    dp[index] = True
                    return True
            dp[index]=False
            return False

        return solve(0)
            


            
