class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        mod = 10**9+7
        dp = [[-1]*(amount+1) for _ in range(len(coins))]
        
        # Approach 
        # step 1: base case when i reach the 0th index i have to check 
        # if target can be divided using number at that index 
        # if yes return that 
        # else return a big number ie mod
        # if i don't take then i add 0 to it since i am not taking any coin
        # an since i am not taking the coin at that index then i'll go to the previous 
        # index 
        # if i take then i'll go again to that same index 
        # but target is subtracted 
        # then i'll take minimum of take and not_take


        def solve(ind,target):

            if dp[ind][target]!=-1:
                return dp[ind][target]

            if ind==0:
                if target%coins[ind]==0:
                    return target//coins[ind]
                else:
                    return mod
                
            not_take = 0 + solve(ind-1,target)
            take = mod
            if target>=coins[ind]:
                take = 1 + solve(ind,target-coins[ind])
            dp[ind][target] = min(take,not_take)
            return min(take,not_take)

        a = solve(len(coins)-1,amount)
        if a>=mod:
            return -1
        else:
            return a

        dp = [[mod]*(amount+1) for _ in range(len(coins))]



        # Approach 
        # step1: at index if the target is divisible by the element in the array 
        # at index 0 then fill it with quotient
        #then start ind from 1 
        # repeat the same steps as previous just put dp infront of solve




        for target in range(amount+1):
            if target%coins[0]==0:
                dp[0][target]=target//coins[0]
            

        for ind in range(1,len(coins)):
            for target in range(amount+1):
                not_take = 0 + dp[ind-1][target]
                take = mod
                if target>=coins[ind]:
                    take = 1 + dp[ind][target-coins[ind]]
                dp[ind][target] = min(take,not_take)

        a = dp[len(coins)-1][target]
        if a>=mod:
            return -1
        else:
            return a




        
        
            
             
        
