class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        dp = {}

        # Approach
        # it is same as all the dp on stocks problems 
        # except when i sell a stock i have to pay a transaction fee 
        def solve(ind,bought):
            
    

            if ind>=len(prices):
                return 0
            if (ind,bought) in dp:
                return dp[(ind,bought)]
            
            if bought==0:
                buy = -prices[ind]+solve(ind+1,1)
                not_buy = solve(ind+1,0)
                dp[(ind,bought)] = max(buy,not_buy)
                return max(buy,not_buy)
            if bought==1:
                sell = prices[ind]-fee + solve(ind+1,0)
                not_sell = solve(ind+1,bought)
                dp[(ind,bought)] = max(sell,not_sell)
                return max(sell,not_sell)
        
        return solve(0,0)

        for bought in range(0,2):
            dp[(len(prices),bought)] = 0
        
        for ind in range(len(prices)-1,-1,-1):
            for bought in range(0,2):
                if bought==0:
                    buy = -prices[ind] + dp.get((ind+1,1),0)
                    not_buy = dp.get((ind+1,0),0)
                    dp[(ind,bought)] = max(buy,not_buy)
                if bought==1:
                    sell = prices[ind]-fee + dp.get((ind+1,0),0)
                    not_sell = dp.get((ind+1,bought),0)
                    dp[(ind,bought)] = max(sell,not_sell)
        return dp.get((0,0),0)
