#User function Template for python3

class Solution:
    def maximumPoints(self, arr, n):
        
        
        dp = [[-1]*4 for _ in range(n)]
        
        # def solve(day,last):
            
        #     if dp[day][last]!=-1:
        #         return dp[day][last]
            
        #     if day==0:
        #         maxi = 0
        #         for i in range(3):
        #             if i!=last:
        #                 maxi = max(maxi,arr[day][i])
        #         dp[day][last]=maxi
        #         return dp[day][last]
    
        #     maxi = 0
        #     for i in range(3):
                
        #         if i!=last:
        #             points = solve(day-1,i)+arr[day][i]
                    
        #             maxi = max(points,maxi)
        #     dp[day][last] = maxi
        #     return maxi
        # return solve(n-1,3)
        
        
        # Approach 
        # take into consideration the base case by allocating stuff to the array 
        # the dp array 
        # then for each day run a for loop 
        # then for each last day run a loop which also includes 3 
        # for each day there are three tasks so run that 
        # and then optimize ie maximize it 
        
        dp = [[0] * 4 for _ in range(n)]
        
        dp[0][0] = max(arr[0][1],arr[0][2])
        dp[0][1] = max(arr[0][0],arr[0][2])
        dp[0][2] = max(arr[0][1],arr[0][0])
        dp[0][3] = max(arr[0][1],arr[0][2],arr[0][0])
        
        
    
        # Initialize the first day
        
        # Fill the dp table
        for day in range(1, n):
            for last in range(4):
                maxi = 0
                for i in range(3):
                    if i != last:
                        points = dp[day-1][i] + arr[day][i]
                        if points>maxi:
                            maxi=points
                        
                        
                dp[day][last] = maxi
        
        # Return the maximum value for the last day
        return max(dp[n-1])
                
