class Solution:
    def change(self, amount: int, coins: List[int]) -> int:

        dp = [[-1]*(amount+1) for _ in range(len(coins))]



        # Approach
        # Step 1: Base case if i reach 0th index then check if target it divisible
        # by the number at ind = 0
        # if yes return 1 else return 0
        # same with take and not take 
        # if not take go to prev index 
        # if take then stay on that index 

        def solve(ind,target):
            
            if dp[ind][target]!=-1:
                return dp[ind][target]

            if ind==0:
                if target%coins[ind]==0:
                    return 1
                else:
                    return 0

            not_take = solve(ind-1,target)
            take = 0
            if target>=coins[ind]:
                take = solve(ind,target-coins[ind])
            dp[ind][target] = take+not_take
            return take+not_take
        return solve(len(coins)-1,amount)


        # Approach 
        # just tabulate the above code 
        # for index = 0 if target can be divided then it is 1 
        # and then start index from 1 in the loop 

        dp = [[0]*(amount+1) for _ in range(len(coins))]
        for target in range(amount+1):
            if target%coins[0]==0:
                dp[0][target]=1
        
        for ind in range(1,len(coins)):
            for target in range(amount+1):
                not_take = dp[ind-1][target]
                take = 0
                if target>=coins[ind]:
                    take = dp[ind][target-coins[ind]]
                dp[ind][target] = take+not_take
        return dp[len(coins)-1][target]
            
        
