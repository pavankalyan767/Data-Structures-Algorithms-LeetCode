class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        grid = obstacleGrid


        # Approach 
        # Step 1: identify the base case ie i==0 and j==0 return 1 way found 
        # Step 2: other cases ie if cant go out i,j less than 0 and if the cell in 
        # which the state is present now then return 0
        # Step 3: use a dp array to store stuff 
        # Step 4: add up and left since this total is needed 
        
        m = len(grid)
        n = len(grid[0])
        dp = [[-1]*n for _ in range(m)]

        # def solve(i,j):
            
        #     if i<0 or j<0 or grid[i][j]==1:
        #         return 0

        #     if dp[i][j]!=-1:
        #         return dp[i][j]
        #     if i==0 and j==0:
        #         return 1
            
            
        #     up = solve(i-1,j)
        #     left=solve(i,j-1)
        #     dp[i][j] = up + left
        #     return up+left
        # return solve(len(grid)-1,len(grid[0])-1)


        # Approach 
        # same as the previosu problem 
        # except with a few edge cases where entry or exit might be an obstacle 
        # rest everything is same 
        # one elif statement which checks if there is a obstacle then it marks the dp 
        # at that index to 0 indicating there is no way in or out 
        #finally up + left is dp at taht particular index
        # update it and return it as usual 
        dp[0][0] = 1
        if grid[m-1][n-1]==1 or grid[0][0]==1:
            return 0
        for i in range(0,m):
            for j in range(0,n):
                up = 0
                left = 0
                if i==0 and j==0:
                    dp[i][j]=1
                elif grid[i][j]==1:
                    dp[i][j]=0
                else:
                    if i>0:
                        up = dp[i-1][j]
                    if j>0:
                        left = dp[i][j-1]
                    dp[i][j] = up + left
        return dp[m-1][n-1]
