#User function Template for python3

class Solution:
    def isSubsetSum (self, N, arr, sum):
        target = sum
        dp = [[-1]*(target+1) for _ in range(N+1)]
        
        # Approach 
        # step1: start from the highest index and find the base case 
        # if target becomes 0 by subtracting then we got answers return True
        # if index==0 and that element is equal to target then return true
        # memoizing it if that particular index is precomputed return that 
        # see if it is false or true 
        # step2: performa all stuff on that index 
        # once take the element once don't take the element 
        # and even if take or not_take is true then return True 
        # else return false
        
        def solve(ind,target):
            if target==0:
                return True
            if ind==0:
                return target==arr[ind]
            
            if dp[ind][target]==0:
                return False
            if dp[ind][target]==1:
                return True
            
            
            take = False
            if target>=arr[ind]:
                take = solve(ind-1,target-arr[ind])
            not_take = solve(ind-1,target)
            
            if take==True or not_take==True:
                dp[ind][target]=1
                return True
            else:
                dp[ind][target]=0
                return False
        a = solve(len(arr)-1,target)
        if a==True:
            return 1
        else:
            return 0
        
        # Approach 
        # step0: initialize a dp array which has ind no of rows 
        # and target number of cols 
        # Step1: base case 1 for target==0 at any index the dp array val is True
        # base case 2 for index 0 for target col dp array is True
        # then same thing with the doing stuff on each index 
        # except convert solve to dp array 
        # step3: finally return the last index ie N-1 and the target 
        
        for ind in range(N+1):
            dp[ind][0]=True
        if arr[0]<=target:
            dp[0][arr[0]] = True
        
        for ind in range(1,N):
            for tar in range(1,target+1):
                take = False
                if tar>=arr[ind]:
                    take = dp[ind-1][tar-arr[ind]]
                not_take = dp[ind-1][tar]
                
                if take==True or not_take==True:
                    dp[ind][tar]=True
                else:
                    dp[ind][tar]=False
        return dp[N-1][target]


#{ 
 # Driver Code Starts
#Initial Template for Python 3

if __name__ == '__main__': 
    t = int (input ())
    for _ in range (t):
        N = int(input())
        arr = input().split()
        for itr in range(N):
            arr[itr] = int(arr[itr])
        sum = int(input())

        ob = Solution()
        if ob.isSubsetSum(N,arr,sum)==True:
            print(1)
        else :
            print(0)
            
        

# } Driver Code Ends
