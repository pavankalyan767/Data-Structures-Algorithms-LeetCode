#User function Template for python3

class Solution:
    def knapSack(self, N, W, val, wt):
        dp = {}
        
        # Approach 
        # to pdown approach 
        # there fore base case comes at ind==0
        # step1: when i reach zero index divide remaining weight 
        # with the weight of that item 
        # then multiply it with the value to gain profit 
        # then normal take and not take 
        # if not take go to previous index add 0 
        # if take then add val and stay at the same index 
        # but subtract the weight 
        # at each step maximize the value 
        
        
        
        
        def solve(ind,weight_left):
            if ind==0:
                return (weight_left//wt[0])*val[0]
                
            take = -1e9
            if (ind,weight_left) in dp:
                return dp[(ind,weight_left)]
            not_take = 0+solve(ind-1,weight_left)
            if wt[ind]<=weight_left:
                take = val[ind] + solve(ind,weight_left-wt[ind])
            dp[(ind,weight_left)] = max(take,not_take)
            return max(take,not_take)
            
        return solve(len(val)-1,W)
        
        
        
        
        
        # appraoch 
        # at index=0 fill up the dictionary 
        # for the weight left 
        # the nested loops should start fron 1 for index 
        # snice 0 is already filled 
        # then the weights from 0 to @+1
        #then use dp.get which return the value if the key exists 
        # else returns 0
        
        
        for weight_left in range(0,W+1):
            dp[(0,weight_left)] = (weight_left//wt[0])*val[0]
            
        for ind in range(1,N):
            for weight_left in range(W+1):
                take = -1e9
                not_take = dp.get((ind-1,weight_left),0)
                if wt[ind]<=weight_left:
                    take = val[ind] + dp.get((ind,weight_left-wt[ind]),0)
                dp[(ind,weight_left)] = max(take,not_take)
                
        return dp.get((len(wt)-1,W))
                
            


#{ 
 # Driver Code Starts
#Initial Template for Python 3

if __name__ == '__main__':
    t = int(input())
    for _ in range(t):
        N, W = [int(x) for x in input().split()]
        val = input().split()
        for itr in range(N):
            val[itr] = int(val[itr])
        wt = input().split()
        for it in range(N):
            wt[it] = int(wt[it])
        
        ob = Solution()
        print(ob.knapSack(N, W, val, wt))
# } Driver Code Ends
