class Solution:
    def maxProduct(self, nums: List[int]) -> int:




        # Approach 
        # so at each index i there can be two types of numbers either positive or negative 
        # if positive then positive*max_so_far is a positive greater number 
        # minmumproduct_so_far * positive is greater negative number 
        
        # if negative 
        # negative * negative is greater positive number 
        # negative * positive is grater negative number 
        # so inorder to be able to use a negative number int he next step and multiply it with the negative 
        # number in the next step and get a great number 
        # at every index accumulate maximum product so far and minimum product so far 

        if not nums:
            return 0

        
        max_so_far=min_so_far=overall_max = nums[0]


        for num in nums[1:]:
            prev_max = max_so_far
            max_so_far = max(num*prev_max,num*min_so_far,num)
            min_so_far = min(num*prev_max,num*min_so_far,num)

            overall_max = max(overall_max,max_so_far)

        return overall_max




        # def solve(index,prev_index):
        #     if index==len(nums)-1:
        #         if prev_index+1==index:
        #             return nums[index]
        #         return 1
        #     if index>len(nums)-1:
        #         return 1



        #     if prev_index+1==index:
        #         answer=nums[index]
        #     else:
        #         answer = 1


        #     if prev_index+1==index:
        #         product = max(nums[index],nums[index]*solve(index+1,index))
        #         answer = max(answer,product)
        #     elif prev_index+1!=index:

        #         product = max(solve(index+1,prev_index),nums[index]*solve(index+1,index))
        #         answer = max(answer,product)

        #     return answer
            
            
            

            


        # result = -float('inf')
        # for i in range(len(nums)):
        #     result = max(result,nums[i]*solve(i+1,i))
        # return result
        
