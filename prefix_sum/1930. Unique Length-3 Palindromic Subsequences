"""
1930. Unique Length-3 Palindromic Subsequences
Solved
Medium
Topics
Companies
Hint
Given a string s, return the number of unique palindromes of length three that are a subsequence of s.

Note that even if there are multiple ways to obtain the same subsequence, it is still only counted once.

A palindrome is a string that reads the same forwards and backwards.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
 

Example 1:

Input: s = "aabca"
Output: 3
Explanation: The 3 palindromic subsequences of length 3 are:
- "aba" (subsequence of "aabca")
- "aaa" (subsequence of "aabca")
- "aca" (subsequence of "aabca")
Example 2:

Input: s = "adc"
Output: 0
Explanation: There are no palindromic subsequences of length 3 in "adc".
Example 3:

Input: s = "bbcbaba"
Output: 4
Explanation: The 4 palindromic subsequences of length 3 are:
- "bbb" (subsequence of "bbcbaba")
- "bcb" (subsequence of "bbcbaba")
- "bab" (subsequence of "bbcbaba")
- "aba" (subsequence of "bbcbaba")
 

Constraints:

3 <= s.length <= 105
s consists of only lowercase English letters.
"""

"""
Approach
1. Inorder to form unique pallindromes of length of 3 from the string s 
2. find the letters that have a frequency of 2 or more , only then pallindrome can be formed of size 3 
3. after finding those , find the index of each of such letters , when they appear for the first time in the string
4. and do the same thing by going from the end of the string to the beginning , first time it appears when traversing 
5. from the last of the string 
6. now i get an interval of where these letters appeared first and last 
7. i have to find the unique number of letters in that particular interval 
8 . that will be the total number of unique length pallindrome subsequences

"""


from collections import Counter


class Solution:
    def countPalindromicSubsequence(self, s: str) -> int:


        frequency = Counter(s)
        a = set()
        for i in frequency:
            if frequency[i]>1:
                a.add(i)

        

        pre = {}

        for i in range(len(s)):
            if s[i] in a and s[i] not in pre:
                pre[s[i]] = i
        
        post = {}
        
        for j in range(len(s)-1,-1,-1):
            if s[j] in a and s[j] not in post:
                post[s[j]] = j

        print(pre)
        print(post)

        intervals = []

        for i in a:
            intervals.append([pre[i],post[i]])
        count = 0
        for l,r in intervals:
            count+=len(set(s[l+1:r]))

        return count
        


        

        



        
